<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator - GIIS Clubs</title>
    <link rel="icon" type="image/x-icon" href="resources/favicon.ico">
    <style>
        @font-face {
            font-family: 'Garet';
            src: url('fonts/GaretR.otf') format('opentype');
            font-weight: 400;
            font-style: normal;
        }
        
        @font-face {
            font-family: 'Garet';
            src: url('fonts/GaretH.otf') format('opentype');
            font-weight: 700;
            font-style: normal;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Garet', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #ffffff;
        }
        
        /* Header */
        .header {
            background: #ffffff;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            padding: 0;
        }
        
        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 30px;
        }
        
        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .logo {
            height: 70px;
            width: auto;
        }
        
        .logo-text {
            font-size: 24px;
            font-weight: 700;
            color: #1a237e;
            text-decoration: none;
            letter-spacing: -0.5px;
        }
        
        .nav-links {
            display: flex;
            align-items: center;
            gap: 40px;
            list-style: none;
        }
        
        .nav-links a {
            color: #333;
            text-decoration: none;
            font-weight: 500;
            font-size: 16px;
            transition: all 0.3s ease;
            position: relative;
            padding: 8px 0;
        }
        
        .nav-links a:hover {
            color: #1a237e;
        }
        
        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, #1a237e, #3f51b5);
            transition: width 0.3s ease;
        }
        
        .nav-links a:hover::after {
            width: 100%;
        }
        
        .cta-button {
            background: linear-gradient(135deg, #1a237e 0%, #3f51b5 100%);
            color: white;
            padding: 12px 25px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }
        
        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(26, 35, 126, 0.3);
        }
        
        /* Mobile Menu */
        .mobile-menu-toggle {
            display: none;
            background: none;
            border: none;
            font-size: 24px;
            color: #333;
            cursor: pointer;
            padding: 8px;
        }
        
        /* Mobile Vertical Navbar */
        .mobile-nav {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: #ffffff;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            flex-direction: column;
            transform: translateY(-100%);
            transition: transform 0.3s ease;
        }
        
        .mobile-nav.active {
            display: flex;
            transform: translateY(0);
        }
        
        .mobile-nav-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .mobile-nav-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #333;
            cursor: pointer;
            padding: 8px;
        }
        
        .mobile-nav-links {
            list-style: none;
            padding: 0;
            margin: 0;
            background: #ffffff;
        }
        
        .mobile-nav-links li {
            border-bottom: 1px solid #f0f0f0;
        }
        
        .mobile-nav-links a {
            display: block;
            color: #333;
            text-decoration: none;
            font-weight: 500;
            font-size: 16px;
            padding: 18px 20px;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .mobile-nav-links a:hover {
            background: #f8f9ff;
            color: #1a237e;
            padding-left: 30px;
        }
        
        .mobile-nav-links a::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(135deg, #1a237e, #3f51b5);
            transition: width 0.3s ease;
        }
        
        .mobile-nav-links a:hover::before {
            width: 4px;
        }
        
        /* Hide desktop nav on mobile, show mobile nav */
        @media (max-width: 968px) {
            .nav-links, .nav-actions {
                display: none;
            }
            
            .mobile-menu-toggle {
                display: block;
            }
            
            body {
                padding-top: 80px;
            }
            
            .mobile-nav {
                display: flex;
            }
            
            .nav-container {
                padding: 15px 20px;
            }
        }
        
        /* QR Generator Specific Styles */
        .main-content {
            padding: 120px 30px 80px;
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .input-section {
            padding: 40px;
            background: linear-gradient(135deg, #1a237e 0%, #3f51b5 100%);
            color: white;
        }
        
        .output-section {
            padding: 40px;
            background: white;
        }
        
        .section-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
        }
        
        .section-subtitle {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
            color: rgba(255, 255, 255, 0.9);
        }
        
        input[type="text"], input[type="url"], textarea, select {
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transition: all 0.3s ease;
            font-family: inherit;
        }
        
        input[type="text"]::placeholder, 
        input[type="url"]::placeholder, 
        textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        input[type="text"]:focus, 
        input[type="url"]:focus, 
        textarea:focus, 
        select:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.8);
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1);
        }
        
        textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .color-input-group {
            position: relative;
        }
        
        input[type="color"] {
            width: 100%;
            height: 50px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            background: none;
        }
        
        .btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: inherit;
            margin-top: 10px;
        }
        
        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
        }
        
        .btn-primary {
            background: white;
            color: #1a237e;
            border-color: white;
        }
        
        .btn-primary:hover {
            background: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .qr-output {
            text-align: center;
            background: #f8f9ff;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            border: 2px dashed #e0e7ff;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .qr-placeholder {
            color: #666;
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .qr-icon {
            font-size: 64px;
            opacity: 0.3;
            margin-bottom: 20px;
        }
        
        #qr-canvas {
            max-width: 100%;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .qr-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 20px;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #1a237e 0%, #3f51b5 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: inherit;
        }
        
        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(26, 35, 126, 0.3);
        }
        
        .preset-styles {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .style-preset {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
        }
        
        .style-preset:hover,
        .style-preset.active {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
        }
        
        .style-preview {
            width: 40px;
            height: 40px;
            margin: 0 auto 10px;
            border-radius: 5px;
            background: var(--preview-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--preview-fg);
            font-weight: bold;
            font-size: 10px;
        }
        
        .alert {
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }
        
        .alert-success {
            background: rgba(212, 237, 218, 0.2);
            border-color: #28a745;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .alert-error {
            background: rgba(248, 215, 218, 0.2);
            border-color: #dc3545;
            color: rgba(255, 255, 255, 0.9);
        }
        
        @media (max-width: 768px) {
            .main-content {
                padding: 100px 20px 60px;
            }
            
            .container {
                grid-template-columns: 1fr;
                margin: 10px;
                border-radius: 15px;
            }
            
            .input-section, .output-section {
                padding: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .qr-actions {
                grid-template-columns: 1fr;
            }
            
            .preset-styles {
                grid-template-columns: repeat(3, 1fr);
            }
        }
        
        .footer {
            background: #1a237e;
            color: white;
            padding: 60px 30px 30px;
        }
        
        .footer-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 40px;
            margin-bottom: 40px;
        }
        
        .footer-section h3 {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 20px;
            color: white;
        }
        
        .footer-section a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            display: block;
            margin-bottom: 10px;
            transition: color 0.3s ease;
        }
        
        .footer-section a:hover {
            color: white;
        }
        
        .footer-bottom {
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            padding-top: 30px;
            text-align: center;
            color: rgba(255, 255, 255, 0.8);
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="nav-container">
            <a href="/">
            <div class="logo-section" >
                <img src="resources/2.png" alt="GIIS Clubs" class="logo">
            </div>
            </a>
            <nav>
                <ul class="nav-links">
                    <li><a href="/shorten">Shorten Links</a></li>
                    <li><a href="/qrcode">QR Code Generator</a></li>
                </ul>
            </nav>
            <button class="mobile-menu-toggle">☰</button>
        </div>
    </header>

    <nav class="mobile-nav">
        <div class="mobile-nav-header">
            <div class="logo-section">
                <img src="resources/2.png" alt="GIIS Clubs" class="logo">
            </div>
            <button class="mobile-nav-close">✕</button>
        </div>
        <ul class="mobile-nav-links">
            <li><a href="/shorten">Shorten Links</a></li>
            <li><a href="/qrcode">QR Code Generator</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
        <div class="container">
            <!-- Input Section -->
            <div class="input-section">
                <h1 class="section-title">QR Code Generator</h1>
                <p class="section-subtitle">Create beautiful QR codes for your club events, links, and more</p>
                
                <div id="alert-container"></div>
                
                <form id="qr-form">
                    <div class="form-group">
                        <label for="qr-data">Content</label>
                        <textarea id="qr-data" name="data" placeholder="Enter URL, text, or any content for your QR code..." required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label>Style Presets</label>
                        <div class="preset-styles">
                            <div class="style-preset active" data-style="classic">
                                <div class="style-preview" style="--preview-bg: #000; --preview-fg: #fff;">QR</div>
                                <div>Classic</div>
                            </div>
                            <div class="style-preset" data-style="modern">
                                <div class="style-preview" style="--preview-bg: #1a237e; --preview-fg: #fff;">QR</div>
                                <div>Modern</div>
                            </div>
                            <div class="style-preset" data-style="vibrant">
                                <div class="style-preview" style="--preview-bg: linear-gradient(45deg, #ff6b6b, #4ecdc4); --preview-fg: #fff;">QR</div>
                                <div>Vibrant</div>
                            </div>
                            <div class="style-preset" data-style="minimal">
                                <div class="style-preview" style="--preview-bg: #f8f9fa; --preview-fg: #333; border: 1px solid #dee2e6;">QR</div>
                                <div>Minimal</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="fg-color">Foreground Color</label>
                            <input type="color" id="fg-color" name="fgColor" value="#000000">
                        </div>
                        <div class="form-group">
                            <label for="bg-color">Background Color</label>
                            <input type="color" id="bg-color" name="bgColor" value="#ffffff">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="size">Size (px)</label>
                            <select id="size" name="size">
                                <option value="200">200x200</option>
                                <option value="300" selected>300x300</option>
                                <option value="400">400x400</option>
                                <option value="500">500x500</option>
                                <option value="600">600x600</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="error-level">Error Correction</label>
                            <select id="error-level" name="errorLevel">
                                <option value="L">Low (~7%)</option>
                                <option value="M" selected>Medium (~15%)</option>
                                <option value="Q">Quartile (~25%)</option>
                                <option value="H">High (~30%)</option>
                            </select>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Generate QR Code</button>
                </form>
            </div>
            
            <!-- Output Section -->
            <div class="output-section">
                <h2 class="section-title" style="color: #1a237e;">Your QR Code</h2>
                <p class="section-subtitle" style="color: #666;">Preview and download your generated QR code</p>
                
                <div class="qr-output" id="qr-output">
                    <div class="qr-icon">📱</div>
                    <div class="qr-placeholder">Your QR code will appear here</div>
                    <p style="color: #999; font-size: 14px;">Enter content and click "Generate QR Code" to create your custom QR code</p>
                </div>
                
                <div class="qr-actions" id="qr-actions" style="display: none;">
                    <button class="btn-secondary" onclick="downloadQR()">
                        📥 Download PNG
                    </button>
                    <button class="btn-secondary" onclick="downloadSVG()">
                        📄 Download SVG
                    </button>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="footer-content">
                <img src="resources/3.png" alt="GIIS Clubs" class="logo" style="height: 200px; width: auto;">
                <div class="footer-section">
                    <h3>GIIS Clubs</h3>
                    <p>Your gateway to vibrant student organizations at Global Indian International School. Discover, join, and lead clubs that ignite your passions and enhance your campus life.</p>
                </div>
                <div class="footer-section">
                    <h3>Quick Links</h3>
                    <a href="/shorten">Shorten Links</a>
                    <a href="/club-links">Club Links</a>
                    <a href="/qrcode">QR Generator</a>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025-26 GIIS Clubs Org. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        let currentQRCode = null;
        let currentQRSVG = null;
        
        // Mobile navigation toggle
        const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
        const mobileNav = document.querySelector('.mobile-nav');
        const mobileNavClose = document.querySelector('.mobile-nav-close');

        function toggleMobileNav() {
            mobileNav.classList.toggle('active');
        }
        
        function closeMobileNav() {
            mobileNav.classList.remove('active');
        }

        mobileMenuToggle?.addEventListener('click', toggleMobileNav);
        mobileNavClose?.addEventListener('click', closeMobileNav);

        // Close mobile nav when clicking on a link
        document.querySelectorAll('.mobile-nav-links a').forEach(link => {
            link.addEventListener('click', closeMobileNav);
        });

        // Close mobile nav when clicking outside
        document.addEventListener('click', (e) => {
            if (!mobileNav?.contains(e.target) && !mobileMenuToggle?.contains(e.target)) {
                closeMobileNav();
            }
        });
        
        // Style preset handling
        document.querySelectorAll('.style-preset').forEach(preset => {
            preset.addEventListener('click', function() {
                document.querySelectorAll('.style-preset').forEach(p => p.classList.remove('active'));
                this.classList.add('active');
                
                const style = this.dataset.style;
                applyPresetStyle(style);
                
                // Regenerate QR code if data exists
                const data = document.getElementById('qr-data').value;
                if (data.trim()) {
                    generateQRCode();
                }
            });
        });
        
        function applyPresetStyle(style) {
            const fgColor = document.getElementById('fg-color');
            const bgColor = document.getElementById('bg-color');
            
            switch(style) {
                case 'classic':
                    fgColor.value = '#000000';
                    bgColor.value = '#ffffff';
                    break;
                case 'modern':
                    fgColor.value = '#1a237e';
                    bgColor.value = '#f8f9ff';
                    break;
                case 'vibrant':
                    fgColor.value = '#ff6b6b';
                    bgColor.value = '#fff5f5';
                    break;
                case 'minimal':
                    fgColor.value = '#6c757d';
                    bgColor.value = '#f8f9fa';
                    break;
            }
        }
        
        // Form submission
        document.getElementById('qr-form').addEventListener('submit', function(e) {
            e.preventDefault();
            generateQRCode();
        });
        
        // Real-time generation on input change
        document.getElementById('qr-data').addEventListener('input', function() {
            if (this.value.trim()) {
                generateQRCode();
            }
        });
        
        document.getElementById('fg-color').addEventListener('change', generateQRCode);
        document.getElementById('bg-color').addEventListener('change', generateQRCode);
        document.getElementById('size').addEventListener('change', generateQRCode);
        document.getElementById('error-level').addEventListener('change', generateQRCode);
        
        function generateQRCode() {
            const data = document.getElementById('qr-data').value.trim();
            const fgColor = document.getElementById('fg-color').value;
            const bgColor = document.getElementById('bg-color').value;
            const size = parseInt(document.getElementById('size').value);
            
            if (!data) {
                showAlert('Please enter some content for your QR code', 'error');
                return;
            }
            
            const output = document.getElementById('qr-output');
            const actions = document.getElementById('qr-actions');
            
            // Clear previous QR code
            output.innerHTML = '<div style="color: #666;">Generating QR code...</div>';
            
            // Check if QRious library is loaded
            if (typeof QRious === 'undefined') {
                // Fallback to online QR API
                generateQRCodeFallback(data, size, fgColor, bgColor);
                return;
            }
            
            try {
                // Create canvas element
                const canvas = document.createElement('canvas');
                canvas.id = 'qr-canvas';
                
                // Generate QR code using QRious
                const qr = new QRious({
                    element: canvas,
                    value: data,
                    size: size,
                    foreground: fgColor,
                    background: bgColor,
                    level: 'M' // Medium error correction
                });
                
                currentQRCode = canvas;
                
                // Store QR data for SVG generation
                window.currentQRData = {
                    data: data,
                    size: size,
                    fgColor: fgColor,
                    bgColor: bgColor
                };
                
                output.innerHTML = '';
                output.appendChild(canvas);
                
                actions.style.display = 'grid';
                
            } catch (error) {
                console.error('QR Code generation error:', error);
                showAlert('Error generating QR code: ' + error.message, 'error');
                // Try fallback
                generateQRCodeFallback(data, size, fgColor, bgColor);
            }
        }
        
        // Native SVG QR Code generator using QR Server API
        function generateSVGQRCode(data, size, fgColor, bgColor) {
            return new Promise((resolve, reject) => {
                // Convert hex colors to RGB for API
                const fgRgb = hexToRgb(fgColor);
                const bgRgb = hexToRgb(bgColor);
                
                const encodedData = encodeURIComponent(data);
                const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedData}&color=${fgRgb}&bgcolor=${bgRgb}&format=svg`;
                
                fetch(apiUrl)
                    .then(response => response.text())
                    .then(svgContent => {
                        resolve(svgContent);
                    })
                    .catch(error => {
                        reject(error);
                    });
            });
        }
        
        function generateQRCodeFallback(data, size, fgColor, bgColor) {
            const output = document.getElementById('qr-output');
            const actions = document.getElementById('qr-actions');
            
            // Use QR Server API as fallback
            const encodedData = encodeURIComponent(data);
            const img = document.createElement('img');
            img.id = 'qr-canvas';
            img.style.maxWidth = '100%';
            img.style.borderRadius = '10px';
            img.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.1)';
            
            // Convert hex colors to RGB for API
            const fgRgb = hexToRgb(fgColor);
            const bgRgb = hexToRgb(bgColor);
            
            img.src = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedData}&color=${fgRgb}&bgcolor=${bgRgb}`;
            
            img.onload = function() {
                output.innerHTML = '';
                output.appendChild(img);
                actions.style.display = 'grid';
                
                // Store for download
                currentQRCode = img;
            };
            
            img.onerror = function() {
                output.innerHTML = '<div style="color: #ff0000;">❌ Unable to generate QR code. Please check your internet connection.</div>';
                showAlert('Failed to generate QR code. Please try again later.', 'error');
            };
        }
        
        function hexToRgb(hex) {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            if (result) {
                const r = parseInt(result[1], 16);
                const g = parseInt(result[2], 16);
                const b = parseInt(result[3], 16);
                return `${r}-${g}-${b}`;
            }
            return '0-0-0';
        }
        
        function downloadQR() {
            if (!currentQRCode) {
                showAlert('Please generate a QR code first', 'error');
                return;
            }
            
            const link = document.createElement('a');
            link.download = 'qrcode.png';
            
            if (currentQRCode.tagName === 'CANVAS') {
                link.href = currentQRCode.toDataURL();
            } else if (currentQRCode.tagName === 'IMG') {
                // For fallback images, we need to convert to canvas first
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = currentQRCode.width || 300;
                canvas.height = currentQRCode.height || 300;
                ctx.drawImage(currentQRCode, 0, 0);
                link.href = canvas.toDataURL();
            }
            
            link.click();
            showAlert('QR code downloaded successfully!', 'success');
        }
        
        function downloadSVG() {
            if (!currentQRCode) {
                showAlert('Please generate a QR code first', 'error');
                return;
            }
            
            // Show loading message
            showAlert('Generating SVG QR code...', 'success');
            
            try {
                // Use stored QR data if available
                if (window.currentQRData) {
                    const { data, size, fgColor, bgColor } = window.currentQRData;
                    
                    // Generate native SVG using API
                    generateSVGQRCode(data, size, fgColor, bgColor)
                        .then(svgContent => {
                            const blob = new Blob([svgContent], { type: 'image/svg+xml;charset=utf-8' });
                            const url = URL.createObjectURL(blob);
                            const link = document.createElement('a');
                            link.download = 'qrcode.svg';
                            link.href = url;
                            link.style.display = 'none';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            URL.revokeObjectURL(url);
                            
                            showAlert('Native SVG QR code downloaded successfully!', 'success');
                        })
                        .catch(error => {
                            console.error('SVG API failed, using canvas conversion:', error);
                            downloadSVGFromCanvas();
                        });
                } else {
                    // Fallback to canvas conversion
                    downloadSVGFromCanvas();
                }
            } catch (error) {
                console.error('SVG download error:', error);
                downloadSVGFromCanvas();
            }
        }
        
        function downloadSVGFromCanvas() {
            try {
                const canvas = currentQRCode;
                if (canvas.tagName === 'CANVAS') {
                    const imageData = canvas.toDataURL('image/png');
                    const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
     width="${canvas.width}" height="${canvas.height}" viewBox="0 0 ${canvas.width} ${canvas.height}">
  <image x="0" y="0" width="${canvas.width}" height="${canvas.height}" xlink:href="${imageData}"/>
</svg>`;
                    
                    const blob = new Blob([svg], { type: 'image/svg+xml;charset=utf-8' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.download = 'qrcode.svg';
                    link.href = url;
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                    
                    showAlert('SVG QR code downloaded successfully!', 'success');
                } else {
                    showAlert('SVG download not available for this QR code type', 'error');
                }
            } catch (error) {
                console.error('Canvas SVG conversion error:', error);
                showAlert('Error downloading SVG: ' + error.message, 'error');
            }
        }
        
        function showAlert(message, type) {
            const container = document.getElementById('alert-container');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            container.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        // Initialize when page loads
        function initializeQRGenerator() {
            console.log('QR Generator page loaded');
            
            // Check if QRious library is available
            if (typeof QRious === 'undefined') {
                showAlert('QR Code library failed to load. Please refresh the page.', 'error');
                console.error('QRious library not loaded');
            } else {
                console.log('QRious library loaded successfully');
            }
        }

        // Load QR Code library dynamically
        function loadQRCodeLibrary() {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js';
            script.onload = function() {
                console.log('QRious library loaded via dynamic script');
                initializeQRGenerator();
            };
            script.onerror = function() {
                console.log('Primary CDN failed, trying backup...');
                const backupScript = document.createElement('script');
                backupScript.src = 'https://unpkg.com/qrious@4.0.2/dist/qrious.min.js';
                backupScript.onload = function() {
                    console.log('QRious library loaded via backup CDN');
                    initializeQRGenerator();
                };
                backupScript.onerror = function() {
                    console.error('All CDNs failed to load QRious library');
                    showAlert('Failed to load QR Code library from all sources. Please check your internet connection.', 'error');
                };
                document.head.appendChild(backupScript);
            };
            document.head.appendChild(script);
        }

        // Start loading when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', loadQRCodeLibrary);
        } else {
            loadQRCodeLibrary();
        }
    </script>
</body>
</html>